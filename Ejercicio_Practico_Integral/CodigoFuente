import machine
import ssd1306
import time
import math
from machine import Pin, ADC, I2C, PWM
from time import sleep, sleep_ms

# Configuración para el LED RGB
pin_rojo = PWM(Pin(25))
pin_verde = PWM(Pin(32))
pin_azul = PWM(Pin(33))

# Configura la frecuencia de PWM (frecuencia estándar de 500 Hz)
pin_rojo.freq(500)
pin_verde.freq(500)
pin_azul.freq(500)

# Función para ajustar el color del LED RGB
def set_color(rojo, verde, azul):
    pin_rojo.duty(rojo)
    pin_verde.duty(verde)
    pin_azul.duty(azul)

# Configuración para la LDR (fotorresistencia)
ldr_pin = ADC(Pin(35))
ldr_pin.atten(ADC.ATTN_11DB)
ldr_pin.width(ADC.WIDTH_12BIT)

# Constantes para la conversión a lux
GAMMA = 0.7
RL10 = 50

def calculate_lux(analog_value):
    voltage = analog_value / 4095.0 * 3.3
    resistance = 2000 * voltage / (1 - voltage / 3.3)
    lux = math.pow(RL10 * 1e3 * math.pow(10, GAMMA) / resistance, (1 / GAMMA)) / 1.808
    return lux

# Configuración del OLED display
i2c = machine.I2C(scl=machine.Pin(22), sda=machine.Pin(21))
oled = ssd1306.SSD1306_I2C(128, 64, i2c)

def draw_tank(x, y, width, height, fill_percentage):
    oled.rect(x, y, width, height, 1)
    fill_height = int((fill_percentage / 100) * height)
    oled.fill_rect(x + 1, y + height - fill_height, width - 2, fill_height, 1)

def mostrar_tanque():
    while True:
        analog_value = ldr_pin.read()
        lux = calculate_lux(analog_value)
        valor = lux
        porcentaje = int((valor / 4095) * 13)
        oled.fill(0)
        draw_tank(50, 10, 28, 44, porcentaje)
        oled.text(str(porcentaje) + '%', 50, 55, 1)
        oled.show()
        time.sleep(0.1)
        # Leer el valor de la LDR
        analog_value = ldr_pin.read()
        lux = calculate_lux(analog_value)
    
        # Ajustar el color del LED RGB según el nivel de luz
        if lux > 0 and lux < 500:
            set_color(0, 0, 1023)     # Azul
        elif lux >= 500 and lux < 1000:
            set_color(1023, 1023, 1023)     # morado
        elif lux >= 1000:
            set_color(1023, 0, 0)     # Rojo
    
    
        # Reproducir la melodía de Mario si el nivel de luz es bajo
        if lux < 500:
            buzzer = Buzzer(23)
            print("Playing mario")
            buzzer.play(mario, 150, 512)
        
        print("Lux:", lux)
        sleep(1)

# Notas y frecuencias para melodías
        

# Notes and its equivalent frequency
B0  = 31
C1  = 33
CS1 = 35
D1  = 37
DS1 = 39
E1  = 41
F1  = 44
FS1 = 46
G1  = 49
GS1 = 52
A1  = 55
AS1 = 58
B1  = 62
C2  = 65
CS2 = 69
D2  = 73
DS2 = 78
E2  = 82
F2  = 87
FS2 = 93
G2  = 98
GS2 = 104
A2  = 110
AS2 = 117
B2  = 123
C3  = 131
CS3 = 139
D3  = 147
DS3 = 156
E3  = 165
F3  = 175
FS3 = 185
G3  = 196
GS3 = 208
A3  = 220
AS3 = 233
B3  = 247
C4  = 262
CS4 = 277
D4  = 294
DS4 = 311
E4  = 330
F4  = 349
FS4 = 370
G4  = 392
GS4 = 415
A4  = 41
AS4 = 466
B4  = 494
C5  = 523
CS5 = 554
D5  = 587
DS5 = 622
E5  = 659
F5  = 698
FS5 = 71
G5  = 784
GS5 = 831
A5  = 880
AS5 = 932
B5  = 988
C6  = 1047
CS6 = 1109
D6  = 1175
DS6 = 1245
E6  = 1319
F6  = 1397
FS6 = 1480
G6  = 1568
GS6 = 1661
A6  = 1760
AS6 = 1865
B6  = 1976
C7  = 2093
CS7 = 2217
D7  = 2349
DS7 = 2489
E7  = 2637
F7  = 2794
FS7 = 2960
G7  = 3136
GS7 = 3322
A7  = 3520
AS7 = 3729
B7  = 3951
C8  = 4186
CS8 = 4435
D8  = 4699
DS8 = 4978
mario = [E7, E7, E7, C7, E7, G7, G6, C7, G6, E6, A6, B6, AS6, A6, G6, E7, G7, A7, F7, G7, E7, C7, D7, B6]

class Buzzer:
    def __init__(self, sig_pin):
        self.pwm = PWM(Pin(sig_pin, Pin.OUT))
    def play(self, melody, wait, duty):
        for note in melody:
            self.pwm.freq(note)
            self.pwm.duty(duty)
            sleep_ms(wait)
        self.pwm.duty(0)

# Instanciar el buzzer


# Bucle principal con ajuste del LED RGB según el nivel de luz

    
    
mostrar_tanque()
    
    
    
    

